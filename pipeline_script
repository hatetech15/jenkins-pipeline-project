pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building the project using Maven...'
                // Example tool: Maven
                sh 'mvn clean package'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit tests and integration tests using JUnit...'
                // Example tool: JUnit for unit testing, and TestNG for integration testing
                sh 'mvn test'
                  }
                  post {
                      always {
                              emailext body: 'Unit and Integration Tests have completed. Status: ${currentBuild.currentResult}',
                               subject: 'Jenkins Pipeline - Test Stage',
                               to: 'bhavishyarane@gmail.com',
                               attachLog: true
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo 'Analyzing code using SonarQube...'
                // Example tool: SonarQube
                sh 'sonar-scanner'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Performing security scan using OWASP Dependency-Check...'
                // Example tool: OWASP Dependency-Check
                sh 'dependency-check.sh --project "MyProject" --scan ./'
                  }
                  post {
                    always {
                            emailext body: 'Security Scan has completed. Status: ${currentBuild.currentResult}',
                             subject: 'Jenkins Pipeline - Security Scan Stage',
                             to: 'developer@example.com',
                             attachLog: true
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying the application to staging...'
                // Example tool: Jenkins with AWS CLI for deployment
                sh 'aws deploy create-deployment --application-name MyApp --deployment-group-name StagingGroup --s3-location bucket=mybucket,key=MyApp.zip,bundleType=zip'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on staging...'
                // Example tool: Postman/Newman for API testing
                sh 'newman run mycollection.postman_collection.json'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Deploying the application to production...'
                // Example tool: Jenkins with AWS CLI for deployment
                sh 'aws deploy create-deployment --application-name MyApp --deployment-group-name ProductionGroup --s3-location bucket=mybucket,key=MyApp.zip,bundleType=zip'
            }
        }
    }
}
